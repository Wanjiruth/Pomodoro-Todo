<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Ruth's Cute Pomodoro App 🌸</title>
  <style>
    /* ---------- THEME VARIABLES ---------- */
    :root {
      --primary: #ff6b9d;
      --secondary: #ff8fab;
      --accent: #ffa8cc;
      --light: #ffccd5;
      --bg: #fef7ff;
      --surface: rgba(255, 255, 255, 0.95);
      --text: #2d1b35;
      --text-light: #6b4c7a;
      --shadow: rgba(255, 107, 157, 0.15);
      --success: #4ecdc4;
    }

    .theme-pink {
      --primary: #ff6b9d;
      --secondary: #ff8fab;
      --accent: #ffa8cc;
      --light: #ffccd5;
      --bg: #fef7ff;
    }

    .theme-purple {
      --primary: #a855f7;
      --secondary: #c084fc;
      --accent: #ddd6fe;
      --light: #e9d5ff;
      --bg: #faf5ff;
    }

    .theme-blue {
      --primary: #3b82f6;
      --secondary: #60a5fa;
      --accent: #93c5fd;
      --light: #dbeafe;
      --bg: #f0f9ff;
    }

    .theme-mint {
      --primary: #10b981;
      --secondary: #34d399;
      --accent: #6ee7b7;
      --light: #a7f3d0;
      --bg: #f0fdf4;
    }

    /* ---------- BASE STYLES ---------- */
    * { 
      margin: 0; 
      padding: 0; 
      box-sizing: border-box; 
    }

    body {
      font-family: 'SF Pro Display', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      background: linear-gradient(135deg, var(--bg) 0%, var(--light) 100%);
      min-height: 100vh;
      padding: 20px;
      color: var(--text);
      overflow-x: hidden;
    }

    body::before {
      content: '';
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: 
        radial-gradient(circle at 20% 20%, var(--accent) 0%, transparent 50%),
        radial-gradient(circle at 80% 80%, var(--secondary) 0%, transparent 50%),
        radial-gradient(circle at 40% 40%, var(--light) 0%, transparent 50%);
      opacity: 0.3;
      z-index: -1;
      animation: float 20s ease-in-out infinite;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
      background: var(--surface);
      border-radius: 32px;
      box-shadow: 
        0 32px 64px rgba(0, 0, 0, 0.08),
        0 0 0 1px rgba(255, 255, 255, 0.1);
      overflow: hidden;
      backdrop-filter: blur(20px);
      position: relative;
    }

    /* ---------- HEADER ---------- */
    .header {
      background: linear-gradient(135deg, var(--primary), var(--secondary));
      padding: 48px 40px;
      color: white;
      text-align: center;
      position: relative;
      overflow: hidden;
    }

    .header::before {
      content: '';
      position: absolute;
      top: -50%;
      right: -20%;
      width: 100px;
      height: 100px;
      background: rgba(255, 255, 255, 0.1);
      border-radius: 50%;
      animation: float 15s ease-in-out infinite;
    }

    .header::after {
      content: '';
      position: absolute;
      bottom: -30%;
      left: -10%;
      width: 80px;
      height: 80px;
      background: rgba(255, 255, 255, 0.08);
      border-radius: 50%;
      animation: float 20s ease-in-out infinite reverse;
    }

    .header h1 { 
      font-size: 3.2em; 
      margin-bottom: 12px; 
      font-weight: 700;
      text-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      position: relative;
      z-index: 1;
    }

    .header p {
      font-size: 1.3em;
      opacity: 0.9;
      font-weight: 500;
      position: relative;
      z-index: 1;
    }

    /* ---------- MAIN CONTENT ---------- */
    .main-content { 
      display: grid; 
      grid-template-columns: 1fr 420px; 
      gap: 0; 
      min-height: 600px;
    }

    .todo-section { 
      padding: 48px 40px;
      position: relative; 
    }

    .pomodoro-section {
      padding: 48px 40px; 
      background: linear-gradient(135deg, var(--bg), rgba(255, 255, 255, 0.8));
      display: flex; 
      flex-direction: column; 
      align-items: center;
      border-left: 1px solid rgba(255, 255, 255, 0.2);
    }

    /* ---------- TODO STYLES ---------- */
    .todo-header {
      display: flex;
      align-items: center;
      gap: 16px;
      margin-bottom: 32px;
    }

    .todo-header h2 {
      font-size: 2em;
      font-weight: 700;
      color: var(--text);
    }

    .todo-stats {
      background: var(--accent);
      color: var(--text);
      padding: 8px 16px;
      border-radius: 20px;
      font-size: 14px;
      font-weight: 600;
    }

    .add-todo { 
      display: flex; 
      margin-bottom: 32px; 
      gap: 12px;
      position: relative;
    }

    .add-todo input {
      flex: 1; 
      padding: 20px 24px; 
      border: 2px solid transparent;
      border-radius: 16px;
      font-size: 16px; 
      outline: none; 
      background: rgba(255, 255, 255, 0.8);
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      box-shadow: 0 4px 12px var(--shadow);
    }

    .add-todo input:focus { 
      border-color: var(--primary);
      box-shadow: 0 8px 24px var(--shadow);
      transform: translateY(-2px);
    }

    .add-btn {
      background: linear-gradient(135deg, var(--primary), var(--secondary)); 
      color: white; 
      border: none;
      padding: 20px 28px; 
      border-radius: 16px; 
      cursor: pointer; 
      font-weight: 700;
      font-size: 16px;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      box-shadow: 0 4px 12px var(--shadow);
      position: relative;
      overflow: hidden;
    }

    .add-btn::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
      transition: left 0.5s;
    }

    .add-btn:hover::before {
      left: 100%;
    }

    .add-btn:hover { 
      transform: translateY(-4px);
      box-shadow: 0 12px 32px var(--shadow);
    }

    .todo-list { 
      list-style: none;
      display: flex;
      flex-direction: column;
      gap: 16px;
    }

    .todo-item {
      background: rgba(255, 255, 255, 0.9); 
      padding: 24px; 
      border-radius: 20px;
      box-shadow: 
        0 4px 16px rgba(0, 0, 0, 0.04),
        0 0 0 1px rgba(255, 255, 255, 0.1);
      display: flex; 
      align-items: center; 
      gap: 20px; 
      transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
      position: relative;
      overflow: hidden;
    }

    .todo-item::before {
      content: '';
      position: absolute;
      left: 0;
      top: 0;
      height: 100%;
      width: 4px;
      background: var(--primary);
      transform: scaleY(0);
      transition: transform 0.3s ease;
    }

    .todo-item:hover::before {
      transform: scaleY(1);
    }

    .todo-item:hover { 
      transform: translateY(-4px); 
      box-shadow: 
        0 12px 32px rgba(0, 0, 0, 0.08),
        0 0 0 1px rgba(255, 255, 255, 0.2);
    }

    .todo-item.completed { 
      opacity: 0.7; 
      background: linear-gradient(135deg, var(--success), #6ee7b7);
      color: white;
    }

    .todo-item.completed .todo-text {
      text-decoration: line-through;
    }

    .todo-checkbox {
      width: 24px; 
      height: 24px; 
      border: 3px solid var(--primary); 
      border-radius: 8px;
      cursor: pointer; 
      position: relative;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .todo-checkbox:hover {
      transform: scale(1.1);
      box-shadow: 0 4px 12px var(--shadow);
    }

    .todo-checkbox.checked { 
      background: var(--primary);
      border-color: var(--primary);
      animation: checkBounce 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);
    }

    .todo-checkbox.checked::after {
      content: '✓'; 
      color: white; 
      font-size: 16px; 
      font-weight: bold;
      position: absolute;
    }

    .todo-text { 
      flex: 1; 
      font-size: 17px;
      font-weight: 500;
      line-height: 1.4;
    }

    .delete-btn {
      background: linear-gradient(135deg, #ff4757, #ff3742);
      color: white; 
      border: none; 
      padding: 12px 16px;
      border-radius: 12px; 
      cursor: pointer; 
      font-size: 14px;
      font-weight: 600;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      opacity: 0;
      transform: scale(0.8);
    }

    .todo-item:hover .delete-btn {
      opacity: 1;
      transform: scale(1);
    }

    .delete-btn:hover {
      transform: scale(1.05);
      box-shadow: 0 4px 12px rgba(255, 71, 87, 0.3);
    }

    /* ---------- TIMER STYLES ---------- */
    .timer-header {
      text-align: center;
      margin-bottom: 32px;
    }

    .timer-header h2 {
      font-size: 1.8em;
      font-weight: 700;
      color: var(--text);
      margin-bottom: 8px;
    }

    .theme-switcher {
      display: flex;
      gap: 12px;
      margin-bottom: 32px;
      justify-content: center;
      flex-wrap: wrap;
    }

    .theme-btn {
      background: rgba(255, 255, 255, 0.8);
      color: var(--text-light);
      border: 2px solid transparent;
      padding: 12px 18px;
      border-radius: 24px;
      cursor: pointer;
      font-weight: 600;
      font-size: 13px;
      display: flex;
      align-items: center;
      gap: 8px;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
      position: relative;
      overflow: hidden;
    }

    .theme-btn::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
      transition: left 0.5s;
    }

    .theme-btn:hover::before {
      left: 100%;
    }

    .theme-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
    }

    .theme-color {
      width: 16px;
      height: 16px;
      border-radius: 50%;
      border: 2px solid rgba(255, 255, 255, 0.8);
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .theme-color.pink { background: #ff6b9d; }
    .theme-color.purple { background: #a855f7; }
    .theme-color.blue { background: #3b82f6; }
    .theme-color.mint { background: #10b981; }

    /* Active theme button styling */
    .theme-pink .theme-pink-btn,
    .theme-purple .theme-purple-btn,
    .theme-blue .theme-blue-btn,
    .theme-mint .theme-mint-btn {
      border-color: var(--primary);
      background: var(--primary);
      color: white;
      box-shadow: 0 8px 24px var(--shadow);
    }

    .timer-modes { 
      display: flex; 
      gap: 8px; 
      margin-bottom: 32px;
      background: rgba(255, 255, 255, 0.6);
      padding: 6px;
      border-radius: 20px;
      box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.05);
    }

    .mode-btn {
      padding: 12px 20px; 
      border: none;
      background: transparent;
      color: var(--text-light); 
      border-radius: 16px; 
      cursor: pointer; 
      font-size: 14px;
      font-weight: 600;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      position: relative;
    }

    .mode-btn.active { 
      background: var(--primary);
      color: white;
      box-shadow: 0 4px 12px var(--shadow);
      transform: translateY(-1px);
    }

    .timer-display-container {
      position: relative;
      margin-bottom: 32px;
    }

    .progress-ring {
      width: 240px;
      height: 240px;
      position: relative;
      margin: 0 auto;
    }

    .progress-ring-bg,
    .progress-ring-fill {
      width: 100%;
      height: 100%;
      border-radius: 50%;
      position: absolute;
    }

    .progress-ring-bg {
      background: rgba(255, 255, 255, 0.3);
      box-shadow: inset 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .progress-ring-fill {
      background: conic-gradient(var(--primary) 0deg, transparent 0deg);
      mask: radial-gradient(farthest-side, transparent 80%, black 80%);
      -webkit-mask: radial-gradient(farthest-side, transparent 80%, black 80%);
    }

    .timer-display {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      font-size: 3.2em; 
      font-weight: 300; 
      color: var(--text); 
      text-align: center; 
      font-family: 'SF Mono', 'Monaco', 'Inconsolata', 'Roboto Mono', monospace;
      text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .timer-controls { 
      display: flex; 
      gap: 16px; 
      margin-bottom: 32px; 
      justify-content: center;
    }

    .timer-btn {
      padding: 16px 24px; 
      border: none; 
      border-radius: 20px; 
      cursor: pointer;
      font-weight: 700; 
      font-size: 15px; 
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      position: relative;
      overflow: hidden;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .timer-btn::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
      transition: left 0.5s;
    }

    .timer-btn:hover::before {
      left: 100%;
    }

    .start-btn { 
      background: linear-gradient(135deg, var(--success), #34d399);
      color: white; 
    }

    .pause-btn { 
      background: linear-gradient(135deg, #fbbf24, #f59e0b);
      color: white; 
    }

    .reset-btn { 
      background: linear-gradient(135deg, #ef4444, #dc2626);
      color: white; 
    }

    .timer-btn:hover { 
      transform: translateY(-3px);
      box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
    }

    .stats { 
      text-align: center; 
      color: var(--text-light); 
      font-size: 15px;
      display: flex;
      flex-direction: column;
      gap: 8px;
    }

    .stat-item {
      background: rgba(255, 255, 255, 0.6);
      padding: 12px 20px;
      border-radius: 16px;
      font-weight: 600;
    }

    /* ---------- CUTE PET STYLES ---------- */
    .cute-pet {
      position: fixed;
      bottom: 32px;
      right: 32px;
      z-index: 1500;
      pointer-events: none;
      transform: scale(0);
      transition: transform 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
    }

    .cute-pet.appear {
      transform: scale(1);
    }

    .pet-body {
      position: relative;
      width: 100px;
      height: 100px;
    }

    .pet-head {
      width: 70px;
      height: 70px;
      background: var(--primary);
      border-radius: 50%;
      position: relative;
      margin: 0 auto;
      animation: idle-breathe 3s ease-in-out infinite;
      box-shadow: 0 8px 24px var(--shadow);
    }

    /* Enhanced pet animations and styles */
    .cute-pet.happy .pet-head {
      animation: happy-bounce 0.6s ease-in-out infinite;
    }

    .cute-pet.excited .pet-head {
      animation: excited-shake 0.3s ease-in-out infinite;
    }

    .cute-pet.celebrating .pet-head {
      animation: celebrate-spin 1s ease-in-out;
    }

    /* Pet features remain the same but enhanced with modern styling */
    .ears {
      position: absolute;
      top: -18px;
      width: 100%;
    }

    .ear {
      position: absolute;
      width: 24px;
      height: 36px;
      background: var(--secondary);
      border-radius: 50% 50% 20% 80%;
      top: 0;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .left-ear {
      left: 10px;
      transform: rotate(-20deg);
      animation: ear-wiggle-left 2s ease-in-out infinite;
    }

    .right-ear {
      right: 10px;
      transform: rotate(20deg);
      animation: ear-wiggle-right 2s ease-in-out infinite;
    }

    /* Eyes, nose, mouth, cheeks, tail - keeping the same structure but with enhanced styling */
    .eyes {
      position: absolute;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      gap: 14px;
    }

    .eye {
      width: 14px;
      height: 14px;
      background: white;
      border-radius: 50%;
      position: relative;
      animation: blink 4s ease-in-out infinite;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .pupil {
      position: absolute;
      width: 7px;
      height: 7px;
      background: #333;
      border-radius: 50%;
      top: 3.5px;
      left: 3.5px;
      transition: all 0.3s ease;
    }

    .nose {
      position: absolute;
      top: 36px;
      left: 50%;
      transform: translateX(-50%);
      width: 8px;
      height: 6px;
      background: var(--secondary);
      border-radius: 50%;
      animation: nose-twitch 3s ease-in-out infinite;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .mouth {
      position: absolute;
      top: 44px;
      left: 50%;
      transform: translateX(-50%);
      width: 14px;
      height: 8px;
      border: 2px solid var(--secondary);
      border-top: none;
      border-radius: 0 0 14px 14px;
      background: transparent;
    }

    .cheeks {
      position: absolute;
      top: 28px;
      width: 100%;
    }

    .cheek {
      position: absolute;
      width: 10px;
      height: 10px;
      background: rgba(255, 192, 203, 0);
      border-radius: 50%;
      transition: background 0.5s ease;
    }

    .left-cheek { left: 2px; }
    .right-cheek { right: 2px; }

    .cute-pet.happy .cheek {
      background: rgba(255, 192, 203, 0.6);
      animation: blush-pulse 1s ease-in-out infinite;
    }

    .tail {
      position: absolute;
      bottom: 20px;
      right: -18px;
      width: 30px;
      height: 10px;
      background: var(--secondary);
      border-radius: 50%;
      transform-origin: left center;
      animation: tail-wag 1.5s ease-in-out infinite;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    /* Heart particles */
    .heart-particles {
      position: absolute;
      top: -24px;
      left: 50%;
      transform: translateX(-50%);
      pointer-events: none;
    }

    .heart {
      position: absolute;
      color: var(--primary);
      font-size: 14px;
      animation: float-heart 2s ease-out forwards;
      opacity: 0;
    }

    /* ---------- COMPLETION MESSAGE ---------- */
    .completion-message {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%) scale(0);
      background: linear-gradient(135deg, var(--primary), var(--secondary));
      color: white;
      padding: 48px;
      border-radius: 32px;
      box-shadow: 
        0 32px 64px rgba(0, 0, 0, 0.2),
        0 0 0 1px rgba(255, 255, 255, 0.1);
      text-align: center;
      z-index: 2000;
      transition: transform 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55);
      max-width: 500px;
      backdrop-filter: blur(20px);
    }

    .completion-message.show {
      transform: translate(-50%, -50%) scale(1);
    }

    .completion-message h2 {
      font-size: 2.5em;
      margin-bottom: 16px;
      animation: bounce 1s ease-in-out;
      font-weight: 800;
    }

    .completion-message p {
      font-size: 1.3em;
      margin-bottom: 24px;
      opacity: 0;
      animation: fadeIn 0.5s 0.5s forwards;
      line-height: 1.5;
    }

    .completion-message .close-btn {
      background: rgba(255, 255, 255, 0.2);
      color: white;
      border: 2px solid rgba(255, 255, 255, 0.3);
      padding: 16px 32px;
      border-radius: 16px;
      cursor: pointer;
      font-weight: 700;
      font-size: 16px;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      backdrop-filter: blur(10px);
    }

    .completion-message .close-btn:hover {
      background: rgba(255, 255, 255, 0.3);
      transform: scale(1.05);
      box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
    }

    /* ---------- ANIMATIONS ---------- */
    @keyframes float {
      0%, 100% { transform: translateY(0px) rotate(0deg); }
      33% { transform: translateY(-20px) rotate(1deg); }
      66% { transform: translateY(10px) rotate(-1deg); }
    }

    @keyframes checkBounce {
      0% { transform: scale(1); }
      50% { transform: scale(1.2); }
      100% { transform: scale(1); }
    }

    @keyframes idle-breathe {
      0%, 100% { transform: scale(1); }
      50% { transform: scale(1.03); }
    }

    @keyframes happy-bounce {
      0%, 100% { transform: translateY(0) scale(1); }
      50% { transform: translateY(-12px) scale(1.05); }
    }

    @keyframes excited-shake {
      0%, 100% { transform: translateX(0); }
      25% { transform: translateX(-3px) rotate(-1deg); }
      75% { transform: translateX(3px) rotate(1deg); }
    }

    @keyframes celebrate-spin {
      0% { transform: rotate(0deg) scale(1); }
      50% { transform: rotate(180deg) scale(1.15); }
      100% { transform: rotate(360deg) scale(1); }
    }

    @keyframes ear-wiggle-left {
      0%, 100% { transform: rotate(-20deg); }
      50% { transform: rotate(-28deg); }
    }

    @keyframes ear-wiggle-right {
      0%, 100% { transform: rotate(20deg); }
      50% { transform: rotate(28deg); }
    }

    @keyframes tail-wag {
      0%, 100% { transform: rotate(0deg); }
      25% { transform: rotate(18deg); }
      75% { transform: rotate(-18deg); }
    }

    @keyframes blink {
      0%, 90%, 100% { transform: scaleY(1); }
      95% { transform: scaleY(0.1); }
    }

    @keyframes nose-twitch {
      0%, 95%, 100% { transform: translateX(-50%) scale(1); }
      97% { transform: translateX(-50%) scale(1.3); }
    }

    @keyframes blush-pulse {
      0%, 100% { opacity: 0.6; }
      50% { opacity: 0.9; }
    }

    @keyframes float-heart {
      0% { 
        opacity: 1; 
        transform: translateY(0) scale(0.5); 
      }
      100% { 
        opacity: 0; 
        transform: translateY(-60px) scale(1); 
      }
    }

    @keyframes bounce {
      0%, 100% { transform: translateY(0); }
      50% { transform: translateY(-24px); }
    }

    @keyframes fadeIn {
      to { opacity: 1; }
    }

    .confetti {
      position: fixed;
      width: 12px;
      height: 12px;
      background: var(--primary);
      border-radius: 50%;
      animation: confetti-fall 3s linear forwards;
      z-index: 1000;
    }

    @keyframes confetti-fall {
      to {
        transform: translateY(100vh) rotate(720deg);
        opacity: 0;
      }
    }

    /* ---------- RESPONSIVE DESIGN ---------- */
    @media (max-width: 1024px) {
      .main-content { 
        grid-template-columns: 1fr; 
      }
      .pomodoro-section {
        border-left: none;
        border-top: 1px solid rgba(255, 255, 255, 0.2);
      }
    }

    @media (max-width: 768px) {
      body {
        padding: 16px;
      }
      .container {
        border-radius: 24px;
      }
      .header {
        padding: 32px 24px;
      }
      .header h1 {
        font-size: 2.4em;
      }
      .todo-section,
      .pomodoro-section {
        padding: 32px 24px;
      }
      .timer-display {
        font-size: 2.4em;
      }
      .progress-ring {
        width: 200px;
        height: 200px;
      }
      .theme-switcher {
        gap: 8px;
      }
      .theme-btn {
        padding: 10px 14px;
        font-size: 12px;
      }
      .cute-pet {
        bottom: 20px;
        right: 20px;
        transform: scale(0.8);
      }
      .cute-pet.appear {
        transform: scale(0.8);
      }
    }

    @media (max-width: 480px) {
      .header h1 {
        font-size: 2em;
      }
      .timer-display {
        font-size: 2em;
      }
      .progress-ring {
        width: 180px;
        height: 180px;
      }
      .timer-controls {
        flex-wrap: wrap;
        justify-content: center;
      }
      .completion-message {
        margin: 20px;
        padding: 32px 24px;
      }
    }

    /* ---------- ACCESSIBILITY IMPROVEMENTS ---------- */
    @media (prefers-reduced-motion: reduce) {
      *,
      *::before,
      *::after {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
      }
    }

    .sr-only {
      position: absolute;
      width: 1px;
      height: 1px;
      padding: 0;
      margin: -1px;
      overflow: hidden;
      clip: rect(0, 0, 0, 0);
      white-space: nowrap;
      border: 0;
    }

    /* ---------- FOCUS STYLES ---------- */
    .add-btn:focus,
    .theme-btn:focus,
    .mode-btn:focus,
    .timer-btn:focus,
    .delete-btn:focus,
    .todo-checkbox:focus {
      outline: 3px solid var(--accent);
      outline-offset: 2px;
    }

    .add-todo input:focus {
      outline: 3px solid var(--accent);
      outline-offset: 2px;
    }
  </style>
</head>
<body class="theme-pink">
  <div class="container">
    <div class="header">
      <h1>RUTH'S CUTE POMODORO APP 🌸</h1>
      <p>Stay focused, stay fabulous ✨</p>
    </div>

    <div class="main-content">
      <div class="todo-section">
        <div class="todo-header">
          <h2>Today's Tasks</h2>
          <div class="todo-stats" id="todoStats">0 of 0 complete</div>
        </div>

        <div class="add-todo">
          <input type="text" id="todoInput" placeholder="✍️ What amazing thing will you accomplish?" maxlength="100" aria-label="Add new task">
          <button class="add-btn" onclick="addTodo()" aria-label="Add task">
            <span>Add Task</span>
          </button>
        </div>
        <ul class="todo-list" id="todoList" role="list"></ul>
      </div>

      <div class="pomodoro-section">
        <div class="timer-header">
          <h2>Focus Timer</h2>
        </div>

        <!-- Theme switcher -->
        <div class="theme-switcher" role="group" aria-label="Theme selector">
          <button class="theme-btn theme-pink-btn" onclick="setTheme('theme-pink')" aria-label="Pink theme">
            <span class="theme-color pink"></span>
            Pink
          </button>
          <button class="theme-btn theme-purple-btn" onclick="setTheme('theme-purple')" aria-label="Purple theme">
            <span class="theme-color purple"></span>
            Purple
          </button>
          <button class="theme-btn theme-blue-btn" onclick="setTheme('theme-blue')" aria-label="Blue theme">
            <span class="theme-color blue"></span>
            Blue
          </button>
          <button class="theme-btn theme-mint-btn" onclick="setTheme('theme-mint')" aria-label="Mint theme">
            <span class="theme-color mint"></span>
            Mint
          </button>
        </div>

        <div class="timer-modes" role="group" aria-label="Timer modes">
          <button class="mode-btn active" data-mode="work">🎯 Work</button>
          <button class="mode-btn" data-mode="short">☕ Short Break</button>
          <button class="mode-btn" data-mode="long">🌸 Long Break</button>
        </div>

        <div class="timer-display-container">
          <div class="progress-ring">
            <div class="progress-ring-bg"></div>
            <div class="progress-ring-fill" id="progressRing"></div>
            <div class="timer-display" id="timerDisplay" aria-live="polite">40:00</div>
          </div>
        </div>

        <div class="timer-controls" role="group" aria-label="Timer controls">
          <button class="timer-btn start-btn" id="startBtn" aria-label="Start timer">▶ Start</button>
          <button class="timer-btn pause-btn" id="pauseBtn" aria-label="Pause timer">⏸ Pause</button>
          <button class="timer-btn reset-btn" id="resetBtn" aria-label="Reset timer">⏹ Reset</button>
        </div>

        <div class="stats">
          <div class="stat-item">Sessions completed: <span id="sessionCount">0</span></div>
          <div class="stat-item">Current mode: <span id="currentMode">Work</span></div>
        </div>
      </div>
    </div>
  </div>

  <!-- Cute Pet -->
  <div id="walkingCharacter" class="cute-pet" role="img" aria-label="Cute mascot pet">
    <div class="pet-body">
      <!-- Ears -->
      <div class="ears">
        <div class="ear left-ear"></div>
        <div class="ear right-ear"></div>
      </div>
      <!-- Head -->
      <div class="pet-head">
        <div class="eyes">
          <div class="eye left-eye">
            <div class="pupil"></div>
          </div>
          <div class="eye right-eye">
            <div class="pupil"></div>
          </div>
        </div>
        <div class="nose"></div>
        <div class="mouth"></div>
        <!-- Cheeks for blushing -->
        <div class="cheeks">
          <div class="cheek left-cheek"></div>
          <div class="cheek right-cheek"></div>
        </div>
      </div>
      <!-- Tail -->
      <div class="tail"></div>
    </div>
    <!-- Heart particles for celebration -->
    <div class="heart-particles"></div>
  </div>

  <!-- Completion message popup -->
  <div id="completionMessage" class="completion-message" role="dialog" aria-labelledby="completion-title" aria-describedby="completion-text">
    <h2 id="completion-title">🎉 All Tasks Complete! 🎉</h2>
    <p id="completion-text">Great work today! Time to relax and enjoy your evening!</p>
    <button class="close-btn" onclick="closeCompletionMessage()" aria-label="Close celebration message">✨ Amazing! ✨</button>
  </div>

  <!-- Bell sound -->
  <audio id="bellSound" src="https://actions.google.com/sounds/v1/alarms/medium_bell_ringing_near.ogg" preload="auto"></audio>

  <script>
    // ---------- TODO FUNCTIONALITY ----------
    let todos = [];
    let todoId = 0;

    function addTodo() {
      const input = document.getElementById('todoInput');
      const text = input.value.trim();
      if (text === '') return;
      
      const todo = { id: todoId++, text: text, completed: false };
      todos.push(todo);
      input.value = '';
      renderTodos();
      updateTodoStats();
      
      // Add a subtle animation to the new todo
      setTimeout(() => {
        const newTodoElement = document.querySelector(`[data-todo-id="${todo.id}"]`);
        if (newTodoElement) {
          newTodoElement.style.animation = 'checkBounce 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55)';
        }
      }, 100);
    }

    function toggleTodo(id) {
      const todo = todos.find(t => t.id === id);
      if (todo) {
        const wasCompleted = todo.completed;
        todo.completed = !todo.completed;
        renderTodos();
        updateTodoStats();
        
        // Trigger walking character when a task is completed (not uncompleted)
        if (!wasCompleted && todo.completed) {
          triggerWalkingCharacter();
        }
        
        checkAllCompleted();
      }
    }

    function deleteTodo(id) {
      const todoElement = document.querySelector(`[data-todo-id="${id}"]`);
      if (todoElement) {
        todoElement.style.animation = 'fadeOut 0.3s ease-out forwards';
        setTimeout(() => {
          todos = todos.filter(t => t.id !== id);
          renderTodos();
          updateTodoStats();
        }, 300);
      }
    }

    function updateTodoStats() {
      const completedCount = todos.filter(todo => todo.completed).length;
      const totalCount = todos.length;
      const statsElement = document.getElementById('todoStats');
      statsElement.textContent = `${completedCount} of ${totalCount} complete`;
      
      // Update stats color based on progress
      if (completedCount === totalCount && totalCount > 0) {
        statsElement.style.background = 'var(--success)';
        statsElement.style.color = 'white';
      } else {
        statsElement.style.background = 'var(--accent)';
        statsElement.style.color = 'var(--text)';
      }
    }

    function checkAllCompleted() {
      if (todos.length > 0 && todos.every(todo => todo.completed)) {
        showCompletionMessage();
      }
    }

    function showCompletionMessage() {
      const messageEl = document.getElementById('completionMessage');
      const textEl = document.getElementById('completion-text');
      
      const hour = new Date().getHours();
      let message = '';
      
      if (hour >= 5 && hour < 12) {
        message = "🌅 Amazing morning productivity! All tasks crushed before noon!";
      } else if (hour >= 12 && hour < 17) {
        message = "☀️ Afternoon champion! You've conquered your todo list!";
      } else if (hour >= 17 && hour < 21) {
        message = "🌆 Perfect evening! All tasks done. Time to unwind and relax!";
      } else {
        message = "🌙 Night owl productivity! All done! Now get some well-deserved rest!";
      }
      
      textEl.textContent = message;
      messageEl.classList.add('show');
      
      createConfetti();
      document.getElementById('bellSound').play().catch(() => {
        // Handle audio play failure gracefully
      });
      
      if ('speechSynthesis' in window) {
        const utterance = new SpeechSynthesisUtterance("Congratulations! All your tasks are complete!");
        utterance.rate = 0.9;
        utterance.pitch = 1.1;
        speechSynthesis.speak(utterance);
      }
    }

    function triggerWalkingCharacter() {
      const pet = document.getElementById('walkingCharacter');
      
      const actions = ['happy', 'excited', 'celebrating'];
      const randomAction = actions[Math.floor(Math.random() * actions.length)];
      
      pet.className = 'cute-pet';
      
      setTimeout(() => {
        pet.classList.add('appear', randomAction);
        
        if (randomAction === 'celebrating') {
          createHeartParticles();
        }
        
        const duration = randomAction === 'celebrating' ? 3000 : 
                        randomAction === 'excited' ? 2000 : 2500;
        
        setTimeout(() => {
          pet.classList.remove('appear', randomAction);
        }, duration);
        
      }, 300);
    }

    function createHeartParticles() {
      const heartsContainer = document.querySelector('.heart-particles');
      
      for (let i = 0; i < 5; i++) {
        setTimeout(() => {
          const heart = document.createElement('div');
          heart.className = 'heart';
          heart.textContent = '♥';
          heart.style.left = (Math.random() * 40 - 20) + 'px';
          heart.style.animationDelay = (Math.random() * 0.5) + 's';
          
          heartsContainer.appendChild(heart);
          
          setTimeout(() => {
            if (heart.parentNode) {
              heart.parentNode.removeChild(heart);
            }
          }, 2000);
        }, i * 200);
      }
    }

    function closeCompletionMessage() {
      document.getElementById('completionMessage').classList.remove('show');
    }

    function createConfetti() {
      const colors = ['#ff6b9d', '#ff8fab', '#ffa8cc', '#ffffff', '#ffd700', '#4ecdc4'];
      for (let i = 0; i < 60; i++) {
        setTimeout(() => {
          const confetti = document.createElement('div');
          confetti.className = 'confetti';
          confetti.style.left = Math.random() * 100 + '%';
          confetti.style.background = colors[Math.floor(Math.random() * colors.length)];
          confetti.style.animationDelay = Math.random() * 1 + 's';
          confetti.style.animationDuration = (Math.random() * 2 + 2) + 's';
          document.body.appendChild(confetti);
          setTimeout(() => confetti.remove(), 4000);
        }, i * 50);
      }
    }

    function renderTodos() {
      const list = document.getElementById('todoList');
      list.innerHTML = '';
      todos.forEach(todo => {
        const li = document.createElement('li');
        li.className = `todo-item ${todo.completed ? 'completed' : ''}`;
        li.setAttribute('data-todo-id', todo.id);
        li.innerHTML = `
          <div class="todo-checkbox ${todo.completed ? 'checked' : ''}" 
               onclick="toggleTodo(${todo.id})" 
               role="checkbox" 
               aria-checked="${todo.completed}"
               tabindex="0"
               onkeydown="if(event.key==='Enter'||event.key===' ') toggleTodo(${todo.id})"></div>
          <span class="todo-text">${escapeHtml(todo.text)}</span>
          <button class="delete-btn" 
                  onclick="deleteTodo(${todo.id})" 
                  aria-label="Delete task: ${escapeHtml(todo.text)}">🗑️</button>
        `;
        list.appendChild(li);
      });
    }

    function escapeHtml(text) {
      const map = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#039;'
      };
      return text.replace(/[&<>"']/g, m => map[m]);
    }

    // ---------- TIMER FUNCTIONALITY ----------
    let timeLeft = 40 * 60; 
    let timerId = null;
    let isRunning = false;
    let currentMode = 'work';
    let sessionCount = 0;
    let timerEndTime = null;

    const modes = { 
      work: 40 * 60, 
      short: 5 * 60, 
      long: 15 * 60 
    };

    function setMode(mode) {
      if (isRunning) return;
      currentMode = mode;
      timeLeft = modes[mode];
      timerEndTime = null;
      
      document.querySelectorAll('.mode-btn').forEach(btn => btn.classList.remove('active'));
      document.querySelector(`.mode-btn[data-mode="${mode}"]`).classList.add('active');
      
      const modeNames = {
        work: 'Work',
        short: 'Short Break',
        long: 'Long Break'
      };
      document.getElementById('currentMode').textContent = modeNames[mode];
      updateDisplay();
    }

    function startTimer() {
      if (isRunning) return;
      isRunning = true;
      if (!timerEndTime) {
        timerEndTime = Date.now() + timeLeft * 1000;
      }
      document.getElementById('startBtn').innerHTML = '⏰ Running...';
      clearInterval(timerId);
      timerId = setInterval(updateTimer, 1000);
      updateTimer();
    }

    function pauseTimer() {
      if (!isRunning) return;
      isRunning = false;
      clearInterval(timerId);
      timeLeft = getCurrentTimeLeft();
      timerEndTime = null;
      document.getElementById('startBtn').innerHTML = '▶ Start';
    }

    function resetTimer() {
      isRunning = false;
      clearInterval(timerId);
      timeLeft = modes[currentMode];
      timerEndTime = null;
      document.getElementById('startBtn').innerHTML = '▶ Start';
      updateDisplay();
    }

    function getCurrentTimeLeft() {
      if (!timerEndTime) return timeLeft;
      const now = Date.now();
      return Math.max(0, Math.ceil((timerEndTime - now) / 1000));
    }

    function updateTimer() {
      timeLeft = getCurrentTimeLeft();
      updateDisplay();
      if (timeLeft <= 0) completeSession();
    }

    function completeSession() {
      isRunning = false;
      clearInterval(timerId);
      timerEndTime = null;
      sessionCount++;
      document.getElementById('sessionCount').textContent = sessionCount;
      document.getElementById('startBtn').innerHTML = '▶ Start';
      
      document.getElementById('bellSound').play().catch(() => {
        // Handle audio play failure gracefully
      });

      if (currentMode === 'work') {
        if ('speechSynthesis' in window) {
          const utterance = new SpeechSynthesisUtterance("Congratulations! Time for a well-deserved break.");
          speechSynthesis.speak(utterance);
        }
        
        // Auto-switch to break mode
        const nextMode = sessionCount % 4 === 0 ? 'long' : 'short';
        setTimeout(() => setMode(nextMode), 1000);
      } else {
        if ('speechSynthesis' in window) {
          const utterance = new SpeechSynthesisUtterance("Break time is over! Ready to focus again?");
          speechSynthesis.speak(utterance);
        }
      }
      
      // Show completion notification
      showTimerNotification();
    }

    function showTimerNotification() {
      const modeNames = {
        work: 'Work Session',
        short: 'Short Break',
        long: 'Long Break'
      };
      
      const notification = document.createElement('div');
      notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: linear-gradient(135deg, var(--primary), var(--secondary));
        color: white;
        padding: 20px 24px;
        border-radius: 16px;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
        z-index: 1000;
        font-weight: 600;
        animation: slideIn 0.3s ease-out;
      `;
      notification.innerHTML = `🎉 ${modeNames[currentMode]} Complete!`;
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.style.animation = 'slideOut 0.3s ease-in forwards';
        setTimeout(() => notification.remove(), 300);
      }, 3000);
    }

    function updateDisplay() {
      const minutes = Math.floor(timeLeft / 60);
      const seconds = timeLeft % 60;
      const timeString = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
      document.getElementById('timerDisplay').textContent = timeString;
      
      const totalTime = modes[currentMode];
      const progress = ((totalTime - timeLeft) / totalTime) * 360;
      document.getElementById('progressRing').style.background = 
        `conic-gradient(var(--primary) ${progress}deg, rgba(255, 255, 255, 0.3) ${progress}deg)`;
      
      // Update page title with timer
      document.title = `${timeString} - Ruth's Cute Pomodoro App 🌸`;
    }

    // ---------- THEME FUNCTIONALITY ----------
    function setTheme(themeName) {
      document.body.className = themeName;
      localStorage.setItem('pomodoro-theme', themeName);
      
      // Add theme change animation
      document.body.style.animation = 'themeChange 0.5s ease-in-out';
      setTimeout(() => {
        document.body.style.animation = '';
      }, 500);
    }

    // ---------- EVENT LISTENERS ----------
    document.addEventListener('visibilitychange', () => {
      if (isRunning && document.visibilityState === 'visible') {
        updateTimer();
      }
    });

    window.addEventListener('focus', () => { 
      if (isRunning) updateTimer(); 
    });

    document.getElementById('todoInput').addEventListener('keypress', e => { 
      if (e.key === 'Enter') addTodo(); 
    });

    document.getElementById('startBtn').addEventListener('click', startTimer);
    document.getElementById('pauseBtn').addEventListener('click', pauseTimer);
    document.getElementById('resetBtn').addEventListener('click', resetTimer);

    document.querySelectorAll('.mode-btn').forEach(btn => {
      btn.addEventListener('click', () => setMode(btn.getAttribute('data-mode')));
    });

    // Keyboard shortcuts
    document.addEventListener('keydown', e => {
      if (e.ctrlKey || e.metaKey) {
        switch(e.key) {
          case 'Enter':
            e.preventDefault();
            if (isRunning) pauseTimer(); else startTimer();
            break;
          case 'r':
            e.preventDefault();
            resetTimer();
            break;
        }
      }
    });

    // ---------- INITIALIZATION ----------
    document.addEventListener('DOMContentLoaded', () => {
      // Load saved theme
      const savedTheme = localStorage.getItem('pomodoro-theme');
      if (savedTheme) {
        setTheme(savedTheme);
      }
      
      updateDisplay();
      updateTodoStats();
      
      // Add welcome animation
      setTimeout(() => {
        document.querySelector('.container').style.animation = 'fadeIn 0.8s ease-out';
      }, 100);
    });

    // Add additional keyframe animations
    const additionalStyles = document.createElement('style');
    additionalStyles.textContent = `
      @keyframes fadeOut {
        from { opacity: 1; transform: scale(1); }
        to { opacity: 0; transform: scale(0.8); }
      }
      
      @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
      }
      
      @keyframes slideOut {
        from { transform: translateX(0); opacity: 1; }
        to { transform: translateX(100%); opacity: 0; }
      }
      
      @keyframes themeChange {
        0%, 100% { filter: brightness(1); }
        50% { filter: brightness(1.1); }
      }
    `;
    document.head.appendChild(additionalStyles);
  </script>
</body>
</html>